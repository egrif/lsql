name: Build and Release Gem

on:
  push:
    paths:
      - 'lib/lsql/version.rb'
    branches:
      - main
      - master
  workflow_dispatch: # Allow manual triggering

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      version-changed: ${{ steps.check-version.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Get full history to compare versions

      - name: Get current version
        id: get-version
        run: |
          VERSION=$(ruby -r ./lib/lsql/version.rb -e "puts Lsql::VERSION")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if version changed
        id: check-version
        run: |
          # Get the version from the previous commit
          git checkout HEAD~1 -- lib/lsql/version.rb 2>/dev/null || echo "No previous version file"
          if [ -f lib/lsql/version.rb ]; then
            PREV_VERSION=$(ruby -r ./lib/lsql/version.rb -e "puts Lsql::VERSION" 2>/dev/null || echo "0.0.0")
          else
            PREV_VERSION="0.0.0"
          fi
          
          # Restore current version
          git checkout HEAD -- lib/lsql/version.rb
          CURRENT_VERSION=$(ruby -r ./lib/lsql/version.rb -e "puts Lsql::VERSION")
          
          echo "Previous version: $PREV_VERSION"
          echo "Current version: $CURRENT_VERSION"
          
          if [ "$PREV_VERSION" != "$CURRENT_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged"
          fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler: 'latest'
          bundler-cache: true

      - name: Install dependencies
        run: bundle install

      - name: Run tests
        run: bundle exec rspec

      - name: Build gem
        run: |
          gem build lsql.gemspec
          ls -la *.gem

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: Release v${{ needs.check-version.outputs.version }}
          body: |
            ## Changes in v${{ needs.check-version.outputs.version }}
            
            This release was automatically created when the version was updated.
            
            ### Installation
            
            #### From GitHub Packages
            ```bash
            # Configure access to GitHub Packages
            gem install lsql --source "https://rubygems.pkg.github.com/${{ github.repository_owner }}"
            ```
            
            #### From GitHub Releases
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/v${{ needs.check-version.outputs.version }}/lsql-${{ needs.check-version.outputs.version }}.gem
            gem install lsql-${{ needs.check-version.outputs.version }}.gem
            ```
            
            #### From Source
            ```bash
            git clone https://github.com/${{ github.repository }}.git
            cd lsql
            gem build lsql.gemspec
            gem install ./lsql-${{ needs.check-version.outputs.version }}.gem
            ```
            
            ### Features
            - Command-line SQL tool for Lotus environments
            - Parallel execution support with `-p` flag
            - Group operations for batch queries
            - Persistent caching with Redis/file backends
            - Unified configuration in `~/.lsql/config.yml`
          draft: false
          prerelease: false

      - name: Upload gem to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./lsql-${{ needs.check-version.outputs.version }}.gem
          asset_name: lsql-${{ needs.check-version.outputs.version }}.gem
          asset_content_type: application/octet-stream

      - name: Publish to RubyGems (Optional)
        if: false # Set to true if you want to publish to RubyGems
        run: |
          echo "RubyGems publishing is disabled"
          echo "To enable: set secrets.RUBYGEMS_AUTH_TOKEN and change 'if: false' to 'if: true'"

      - name: Publish to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p ~/.gem
          echo ":github: Bearer $GITHUB_TOKEN" > ~/.gem/credentials
          chmod 0600 ~/.gem/credentials
          gem push --key github --host https://rubygems.pkg.github.com/${{ github.repository_owner }} lsql-${{ needs.check-version.outputs.version }}.gem

      - name: Post-release summary
        run: |
          echo "## ðŸš€ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ needs.check-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Gem File**: lsql-${{ needs.check-version.outputs.version }}.gem" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: ${{ steps.create_release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: âœ… Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Packages**: âœ… Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation Commands" >> $GITHUB_STEP_SUMMARY
          echo '#### From GitHub Packages' >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "gem install lsql --source \"https://rubygems.pkg.github.com/${{ github.repository_owner }}\"" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '#### From GitHub Releases' >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "gem install lsql-${{ needs.check-version.outputs.version }}.gem" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
